input {
  beats {
    port => 5044
  }
}

filter {
  # Обработка Nginx access логов
  if [log_type] == "nginx_access" {
    # Парсинг IP адресов
    geoip {
      source => "remote_addr"
      target => "geoip"
      add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
      add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}" ]
    }
    
    # Преобразование координат в float
    mutate {
      convert => { "[geoip][coordinates]" => "float" }
    }

    # Парсинг User-Agent
    useragent {
      source => "http_user_agent"
      target => "user_agent"
    }

    # Извлечение параметров запроса
    grok {
      match => { 
        "request" => "%{WORD:request_method} %{URIPATH:request_path}(?:%{URIPARAM:request_params})? %{WORD:http_version}"
      }
    }

    # Определение типа атаки
    if [request_uri] {
      # SQL Injection detection
      if [request_uri] =~ /union.*select|select.*from|insert.*into|delete.*from|drop.*table|update.*set|benchmark\(|'|"|;|--/ {
        mutate {
          add_tag => [ "sql_injection", "security_alert" ]
          add_field => { "attack_type" => "SQL Injection" }
          add_field => { "severity" => "high" }
        }
      }

      # XSS detection
      if [request_uri] =~ /<script|javascript:|onerror=|onload=|onclick=|<iframe|<object|<embed/ {
        mutate {
          add_tag => [ "xss_attack", "security_alert" ]
          add_field => { "attack_type" => "XSS" }
          add_field => { "severity" => "high" }
        }
      }

      # Path traversal detection
      if [request_uri] =~ /\.\.\/|\.\.\\/ {
        mutate {
          add_tag => [ "path_traversal", "security_alert" ]
          add_field => { "attack_type" => "Path Traversal" }
          add_field => { "severity" => "medium" }
        }
      }

      # Command injection detection
      if [request_uri] =~ /\||`|$\(|%24\(|%60|%7C/ {
        mutate {
          add_tag => [ "command_injection", "security_alert" ]
          add_field => { "attack_type" => "Command Injection" }
          add_field => { "severity" => "critical" }
        }
      }
    }

    # Обнаружение подозрительных User-Agent
    if [http_user_agent] {
      if [http_user_agent] =~ /bot|crawler|spider|scanner|sqlmap|nikto|masscan|wpscan|nmap|^$|^-$/ {
        mutate {
          add_tag => [ "suspicious_user_agent", "security_alert" ]
          add_field => { "alert_reason" => "Suspicious User-Agent detected" }
          update => { "severity" => "medium" }
        }
      }
    }

    # Преобразование типов данных
    mutate {
      convert => {
        "status" => "integer"
        "body_bytes_sent" => "integer"
        "request_time" => "float"
        "upstream_response_time" => "float"
      }
    }

    # Добавление категории статуса
    if [status] {
      if [status] >= 200 and [status] < 300 {
        mutate { add_field => { "status_category" => "success" } }
      } else if [status] >= 300 and [status] < 400 {
        mutate { add_field => { "status_category" => "redirect" } }
      } else if [status] >= 400 and [status] < 500 {
        mutate { add_field => { "status_category" => "client_error" } }
        if [status] == 403 or [status] == 404 {
          mutate { add_tag => [ "potential_scanner" ] }
        }
      } else if [status] >= 500 {
        mutate { add_field => { "status_category" => "server_error" } }
      }
    }
  }

  # Обработка подозрительной активности
  if [log_type] == "suspicious_activity" {
    mutate {
      add_tag => [ "security_incident", "immediate_action" ]
      add_field => { "severity" => "critical" }
    }
  }

  # Обработка отказов в доступе
  if [log_type] == "access_denied" {
    mutate {
      add_tag => [ "access_violation" ]
      add_field => { "severity" => "medium" }
    }
  }

  # Обработка ошибок Nginx
  if [log_type] == "nginx_error" {
    grok {
      match => { 
        "message" => "%{TIMESTAMP_ISO8601:error_timestamp} \[%{LOGLEVEL:error_level}\] %{POSINT:pid}#%{POSINT:tid}: %{GREEDYDATA:error_message}"
      }
    }
  }

  # Добавление временной метки
  date {
    match => [ "time_local", "dd/MMM/yyyy:HH:mm:ss Z" ]
    target => "@timestamp"
  }

  # Удаление ненужных полей
  mutate {
    remove_field => [ "host", "agent", "ecs", "input", "log" ]
  }
}

output {
  # Вывод в Elasticsearch
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "nginx-%{[log_type]}-%{+YYYY.MM.dd}"
    template_name => "nginx"
    template => "/usr/share/logstash/templates/nginx-template.json"
    template_overwrite => true
  }

  # Отправка критических алертов в отдельный индекс
  if "security_alert" in [tags] {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "security-alerts-%{+YYYY.MM.dd}"
    }
  }

  # Вывод в stdout для отладки (можно отключить в продакшене)
  if "_grokparsefailure" in [tags] {
    stdout { 
      codec => rubydebug 
    }
  }
}