# Используем официальный образ Python 3.8 slim в качестве базового
FROM python:3.8-slim

# Устанавливаем переменные окружения
# PYTHONUNBUFFERED гарантирует, что вывод Python отправляется прямо в терминал (полезно для логов Docker)
ENV PYTHONUNBUFFERED 1
# PYTHONDONTWRITEBYTECODE предотвращает создание .pyc файлов Python
ENV PYTHONDONTWRITEBYTECODE 1

# Устанавливаем рабочую директорию в /app внутри контейнера
WORKDIR /app

# Копируем файл зависимостей в рабочую директорию
# Сначала копируем и устанавливаем зависимости, чтобы использовать кэширование слоев Docker.
# Если requirements.txt не изменился, этот слой не будет пересобираться.
COPY requirements.txt .

# Устанавливаем зависимости
RUN pip install --no-cache-dir -r requirements.txt

# Копируем все остальные файлы приложения из текущей директории (контекста сборки)
# в рабочую директорию /app в контейнере.
# Это включает вашу директорию 'app/', 'run.py' и любые другие необходимые файлы.
COPY . .
# Если ваш основной код приложения находится в поддиректории 'app',
# а 'run.py' и 'config.py' (если он используется run:app) находятся в корне,
# убедитесь, что Gunicorn сможет их найти.
# Структура:
# .
# |- Dockerfile
# |- requirements.txt
# |- run.py
# |- app/
#    |- __init__.py
#    |- routes.py
#    |- models.py
#    etc.

# Сообщаем Docker, что приложение будет слушать порт 5000
EXPOSE 5000

# Команда для запуска приложения при старте контейнера
# Используем Gunicorn для запуска Flask-приложения 'app' из файла 'run.py'
# 'run:app' означает: в файле 'run.py' найти объект Flask с именем 'app'.
# '-b 0.0.0.0:5000' заставляет Gunicorn слушать все интерфейсы на порту 5000.
# '--workers=4' - количество рабочих процессов Gunicorn (можно настроить).
# '--log-level=info' - уровень логирования.
CMD ["gunicorn", "-b", "0.0.0.0:5000", "--workers=4", "--log-level=info", "run:app"]
